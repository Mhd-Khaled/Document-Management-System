#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAction(Action instance);
  partial void UpdateAction(Action instance);
  partial void DeleteAction(Action instance);
  partial void InsertActionType(ActionType instance);
  partial void UpdateActionType(ActionType instance);
  partial void DeleteActionType(ActionType instance);
  partial void InsertCurrentRequest(CurrentRequest instance);
  partial void UpdateCurrentRequest(CurrentRequest instance);
  partial void DeleteCurrentRequest(CurrentRequest instance);
  partial void InsertDepartment(Department instance);
  partial void UpdateDepartment(Department instance);
  partial void DeleteDepartment(Department instance);
  partial void InsertDocDetail(DocDetail instance);
  partial void UpdateDocDetail(DocDetail instance);
  partial void DeleteDocDetail(DocDetail instance);
  partial void InsertDocument(Document instance);
  partial void UpdateDocument(Document instance);
  partial void DeleteDocument(Document instance);
  partial void InsertGreivance(Greivance instance);
  partial void UpdateGreivance(Greivance instance);
  partial void DeleteGreivance(Greivance instance);
  partial void InsertPositionOfCurrentDoc(PositionOfCurrentDoc instance);
  partial void UpdatePositionOfCurrentDoc(PositionOfCurrentDoc instance);
  partial void DeletePositionOfCurrentDoc(PositionOfCurrentDoc instance);
  partial void InsertRequestAttachment(RequestAttachment instance);
  partial void UpdateRequestAttachment(RequestAttachment instance);
  partial void DeleteRequestAttachment(RequestAttachment instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertUserType(UserType instance);
  partial void UpdateUserType(UserType instance);
  partial void DeleteUserType(UserType instance);
  partial void InsertWorkflowDocument(WorkflowDocument instance);
  partial void UpdateWorkflowDocument(WorkflowDocument instance);
  partial void DeleteWorkflowDocument(WorkflowDocument instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DatabaseConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Action> Actions
	{
		get
		{
			return this.GetTable<Action>();
		}
	}
	
	public System.Data.Linq.Table<ActionType> ActionTypes
	{
		get
		{
			return this.GetTable<ActionType>();
		}
	}
	
	public System.Data.Linq.Table<CurrentRequest> CurrentRequests
	{
		get
		{
			return this.GetTable<CurrentRequest>();
		}
	}
	
	public System.Data.Linq.Table<Department> Departments
	{
		get
		{
			return this.GetTable<Department>();
		}
	}
	
	public System.Data.Linq.Table<DocDetail> DocDetails
	{
		get
		{
			return this.GetTable<DocDetail>();
		}
	}
	
	public System.Data.Linq.Table<Document> Documents
	{
		get
		{
			return this.GetTable<Document>();
		}
	}
	
	public System.Data.Linq.Table<Greivance> Greivances
	{
		get
		{
			return this.GetTable<Greivance>();
		}
	}
	
	public System.Data.Linq.Table<PositionOfCurrentDoc> PositionOfCurrentDocs
	{
		get
		{
			return this.GetTable<PositionOfCurrentDoc>();
		}
	}
	
	public System.Data.Linq.Table<RequestAttachment> RequestAttachments
	{
		get
		{
			return this.GetTable<RequestAttachment>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<UserType> UserTypes
	{
		get
		{
			return this.GetTable<UserType>();
		}
	}
	
	public System.Data.Linq.Table<WorkflowDocument> WorkflowDocuments
	{
		get
		{
			return this.GetTable<WorkflowDocument>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Actions")]
public partial class Action : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IdAction;
	
	private byte _IdActionType;
	
	private int _ActionbyUserId;
	
	private int _IdRequest;
	
	private string _Note;
	
	private System.Nullable<System.DateTime> _DateOfAction;
	
	private EntitySet<PositionOfCurrentDoc> _PositionOfCurrentDocs;
	
	private EntityRef<ActionType> _ActionType;
	
	private EntityRef<CurrentRequest> _CurrentRequest;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdActionChanging(int value);
    partial void OnIdActionChanged();
    partial void OnIdActionTypeChanging(byte value);
    partial void OnIdActionTypeChanged();
    partial void OnActionbyUserIdChanging(int value);
    partial void OnActionbyUserIdChanged();
    partial void OnIdRequestChanging(int value);
    partial void OnIdRequestChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnDateOfActionChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfActionChanged();
    #endregion
	
	public Action()
	{
		this._PositionOfCurrentDocs = new EntitySet<PositionOfCurrentDoc>(new Action<PositionOfCurrentDoc>(this.attach_PositionOfCurrentDocs), new Action<PositionOfCurrentDoc>(this.detach_PositionOfCurrentDocs));
		this._ActionType = default(EntityRef<ActionType>);
		this._CurrentRequest = default(EntityRef<CurrentRequest>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAction", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IdAction
	{
		get
		{
			return this._IdAction;
		}
		set
		{
			if ((this._IdAction != value))
			{
				this.OnIdActionChanging(value);
				this.SendPropertyChanging();
				this._IdAction = value;
				this.SendPropertyChanged("IdAction");
				this.OnIdActionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdActionType", DbType="TinyInt NOT NULL")]
	public byte IdActionType
	{
		get
		{
			return this._IdActionType;
		}
		set
		{
			if ((this._IdActionType != value))
			{
				if (this._ActionType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdActionTypeChanging(value);
				this.SendPropertyChanging();
				this._IdActionType = value;
				this.SendPropertyChanged("IdActionType");
				this.OnIdActionTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionbyUserId", DbType="Int NOT NULL")]
	public int ActionbyUserId
	{
		get
		{
			return this._ActionbyUserId;
		}
		set
		{
			if ((this._ActionbyUserId != value))
			{
				this.OnActionbyUserIdChanging(value);
				this.SendPropertyChanging();
				this._ActionbyUserId = value;
				this.SendPropertyChanged("ActionbyUserId");
				this.OnActionbyUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRequest", DbType="Int NOT NULL")]
	public int IdRequest
	{
		get
		{
			return this._IdRequest;
		}
		set
		{
			if ((this._IdRequest != value))
			{
				if (this._CurrentRequest.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdRequestChanging(value);
				this.SendPropertyChanging();
				this._IdRequest = value;
				this.SendPropertyChanged("IdRequest");
				this.OnIdRequestChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(500)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAction", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateOfAction
	{
		get
		{
			return this._DateOfAction;
		}
		set
		{
			if ((this._DateOfAction != value))
			{
				this.OnDateOfActionChanging(value);
				this.SendPropertyChanging();
				this._DateOfAction = value;
				this.SendPropertyChanged("DateOfAction");
				this.OnDateOfActionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_PositionOfCurrentDoc", Storage="_PositionOfCurrentDocs", ThisKey="IdAction", OtherKey="IdAction")]
	public EntitySet<PositionOfCurrentDoc> PositionOfCurrentDocs
	{
		get
		{
			return this._PositionOfCurrentDocs;
		}
		set
		{
			this._PositionOfCurrentDocs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActionType_Action", Storage="_ActionType", ThisKey="IdActionType", OtherKey="IdActionType", IsForeignKey=true)]
	public ActionType ActionType
	{
		get
		{
			return this._ActionType.Entity;
		}
		set
		{
			ActionType previousValue = this._ActionType.Entity;
			if (((previousValue != value) 
						|| (this._ActionType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ActionType.Entity = null;
					previousValue.Actions.Remove(this);
				}
				this._ActionType.Entity = value;
				if ((value != null))
				{
					value.Actions.Add(this);
					this._IdActionType = value.IdActionType;
				}
				else
				{
					this._IdActionType = default(byte);
				}
				this.SendPropertyChanged("ActionType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurrentRequest_Action", Storage="_CurrentRequest", ThisKey="IdRequest", OtherKey="IdRequest", IsForeignKey=true)]
	public CurrentRequest CurrentRequest
	{
		get
		{
			return this._CurrentRequest.Entity;
		}
		set
		{
			CurrentRequest previousValue = this._CurrentRequest.Entity;
			if (((previousValue != value) 
						|| (this._CurrentRequest.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CurrentRequest.Entity = null;
					previousValue.Actions.Remove(this);
				}
				this._CurrentRequest.Entity = value;
				if ((value != null))
				{
					value.Actions.Add(this);
					this._IdRequest = value.IdRequest;
				}
				else
				{
					this._IdRequest = default(int);
				}
				this.SendPropertyChanged("CurrentRequest");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PositionOfCurrentDocs(PositionOfCurrentDoc entity)
	{
		this.SendPropertyChanging();
		entity.Action = this;
	}
	
	private void detach_PositionOfCurrentDocs(PositionOfCurrentDoc entity)
	{
		this.SendPropertyChanging();
		entity.Action = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActionTypes")]
public partial class ActionType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _IdActionType;
	
	private string _Name;
	
	private EntitySet<Action> _Actions;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdActionTypeChanging(byte value);
    partial void OnIdActionTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public ActionType()
	{
		this._Actions = new EntitySet<Action>(new Action<Action>(this.attach_Actions), new Action<Action>(this.detach_Actions));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdActionType", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public byte IdActionType
	{
		get
		{
			return this._IdActionType;
		}
		set
		{
			if ((this._IdActionType != value))
			{
				this.OnIdActionTypeChanging(value);
				this.SendPropertyChanging();
				this._IdActionType = value;
				this.SendPropertyChanged("IdActionType");
				this.OnIdActionTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActionType_Action", Storage="_Actions", ThisKey="IdActionType", OtherKey="IdActionType")]
	public EntitySet<Action> Actions
	{
		get
		{
			return this._Actions;
		}
		set
		{
			this._Actions.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Actions(Action entity)
	{
		this.SendPropertyChanging();
		entity.ActionType = this;
	}
	
	private void detach_Actions(Action entity)
	{
		this.SendPropertyChanging();
		entity.ActionType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CurrentRequests")]
public partial class CurrentRequest : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IdRequest;
	
	private int _IdDoc;
	
	private int _IdUser;
	
	private string _Title;
	
	private System.DateTime _DateOf;
	
	private System.Nullable<int> _CreatedByUserId;
	
	private bool _IsCompleted;
	
	private bool _IsCompletedUser;
	
	private EntitySet<Action> _Actions;
	
	private EntitySet<PositionOfCurrentDoc> _PositionOfCurrentDocs;
	
	private EntitySet<RequestAttachment> _RequestAttachments;
	
	private EntityRef<Document> _Document;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRequestChanging(int value);
    partial void OnIdRequestChanged();
    partial void OnIdDocChanging(int value);
    partial void OnIdDocChanged();
    partial void OnIdUserChanging(int value);
    partial void OnIdUserChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDateOfChanging(System.DateTime value);
    partial void OnDateOfChanged();
    partial void OnCreatedByUserIdChanging(System.Nullable<int> value);
    partial void OnCreatedByUserIdChanged();
    partial void OnIsCompletedChanging(bool value);
    partial void OnIsCompletedChanged();
    partial void OnIsCompletedUserChanging(bool value);
    partial void OnIsCompletedUserChanged();
    #endregion
	
	public CurrentRequest()
	{
		this._Actions = new EntitySet<Action>(new Action<Action>(this.attach_Actions), new Action<Action>(this.detach_Actions));
		this._PositionOfCurrentDocs = new EntitySet<PositionOfCurrentDoc>(new Action<PositionOfCurrentDoc>(this.attach_PositionOfCurrentDocs), new Action<PositionOfCurrentDoc>(this.detach_PositionOfCurrentDocs));
		this._RequestAttachments = new EntitySet<RequestAttachment>(new Action<RequestAttachment>(this.attach_RequestAttachments), new Action<RequestAttachment>(this.detach_RequestAttachments));
		this._Document = default(EntityRef<Document>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRequest", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IdRequest
	{
		get
		{
			return this._IdRequest;
		}
		set
		{
			if ((this._IdRequest != value))
			{
				this.OnIdRequestChanging(value);
				this.SendPropertyChanging();
				this._IdRequest = value;
				this.SendPropertyChanged("IdRequest");
				this.OnIdRequestChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDoc", DbType="Int NOT NULL")]
	public int IdDoc
	{
		get
		{
			return this._IdDoc;
		}
		set
		{
			if ((this._IdDoc != value))
			{
				if (this._Document.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdDocChanging(value);
				this.SendPropertyChanging();
				this._IdDoc = value;
				this.SendPropertyChanged("IdDoc");
				this.OnIdDocChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", DbType="Int NOT NULL")]
	public int IdUser
	{
		get
		{
			return this._IdUser;
		}
		set
		{
			if ((this._IdUser != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdUserChanging(value);
				this.SendPropertyChanging();
				this._IdUser = value;
				this.SendPropertyChanged("IdUser");
				this.OnIdUserChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOf", DbType="Date NOT NULL")]
	public System.DateTime DateOf
	{
		get
		{
			return this._DateOf;
		}
		set
		{
			if ((this._DateOf != value))
			{
				this.OnDateOfChanging(value);
				this.SendPropertyChanging();
				this._DateOf = value;
				this.SendPropertyChanged("DateOf");
				this.OnDateOfChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByUserId", DbType="Int")]
	public System.Nullable<int> CreatedByUserId
	{
		get
		{
			return this._CreatedByUserId;
		}
		set
		{
			if ((this._CreatedByUserId != value))
			{
				this.OnCreatedByUserIdChanging(value);
				this.SendPropertyChanging();
				this._CreatedByUserId = value;
				this.SendPropertyChanged("CreatedByUserId");
				this.OnCreatedByUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCompleted", DbType="Bit NOT NULL")]
	public bool IsCompleted
	{
		get
		{
			return this._IsCompleted;
		}
		set
		{
			if ((this._IsCompleted != value))
			{
				this.OnIsCompletedChanging(value);
				this.SendPropertyChanging();
				this._IsCompleted = value;
				this.SendPropertyChanged("IsCompleted");
				this.OnIsCompletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCompletedUser", DbType="Bit NOT NULL")]
	public bool IsCompletedUser
	{
		get
		{
			return this._IsCompletedUser;
		}
		set
		{
			if ((this._IsCompletedUser != value))
			{
				this.OnIsCompletedUserChanging(value);
				this.SendPropertyChanging();
				this._IsCompletedUser = value;
				this.SendPropertyChanged("IsCompletedUser");
				this.OnIsCompletedUserChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurrentRequest_Action", Storage="_Actions", ThisKey="IdRequest", OtherKey="IdRequest")]
	public EntitySet<Action> Actions
	{
		get
		{
			return this._Actions;
		}
		set
		{
			this._Actions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurrentRequest_PositionOfCurrentDoc", Storage="_PositionOfCurrentDocs", ThisKey="IdRequest", OtherKey="IdRequest")]
	public EntitySet<PositionOfCurrentDoc> PositionOfCurrentDocs
	{
		get
		{
			return this._PositionOfCurrentDocs;
		}
		set
		{
			this._PositionOfCurrentDocs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurrentRequest_RequestAttachment", Storage="_RequestAttachments", ThisKey="IdRequest", OtherKey="IdRequest")]
	public EntitySet<RequestAttachment> RequestAttachments
	{
		get
		{
			return this._RequestAttachments;
		}
		set
		{
			this._RequestAttachments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_CurrentRequest", Storage="_Document", ThisKey="IdDoc", OtherKey="IdDoc", IsForeignKey=true)]
	public Document Document
	{
		get
		{
			return this._Document.Entity;
		}
		set
		{
			Document previousValue = this._Document.Entity;
			if (((previousValue != value) 
						|| (this._Document.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Document.Entity = null;
					previousValue.CurrentRequests.Remove(this);
				}
				this._Document.Entity = value;
				if ((value != null))
				{
					value.CurrentRequests.Add(this);
					this._IdDoc = value.IdDoc;
				}
				else
				{
					this._IdDoc = default(int);
				}
				this.SendPropertyChanged("Document");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CurrentRequest", Storage="_User", ThisKey="IdUser", OtherKey="UserId", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.CurrentRequests.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.CurrentRequests.Add(this);
					this._IdUser = value.UserId;
				}
				else
				{
					this._IdUser = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Actions(Action entity)
	{
		this.SendPropertyChanging();
		entity.CurrentRequest = this;
	}
	
	private void detach_Actions(Action entity)
	{
		this.SendPropertyChanging();
		entity.CurrentRequest = null;
	}
	
	private void attach_PositionOfCurrentDocs(PositionOfCurrentDoc entity)
	{
		this.SendPropertyChanging();
		entity.CurrentRequest = this;
	}
	
	private void detach_PositionOfCurrentDocs(PositionOfCurrentDoc entity)
	{
		this.SendPropertyChanging();
		entity.CurrentRequest = null;
	}
	
	private void attach_RequestAttachments(RequestAttachment entity)
	{
		this.SendPropertyChanging();
		entity.CurrentRequest = this;
	}
	
	private void detach_RequestAttachments(RequestAttachment entity)
	{
		this.SendPropertyChanging();
		entity.CurrentRequest = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departments")]
public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IdDept;
	
	private string _Name;
	
	private string _Phone;
	
	private EntitySet<Document> _Documents;
	
	private EntitySet<Greivance> _Greivances;
	
	private EntitySet<PositionOfCurrentDoc> _PositionOfCurrentDocs;
	
	private EntitySet<User> _Users;
	
	private EntitySet<WorkflowDocument> _WorkflowDocuments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdDeptChanging(int value);
    partial void OnIdDeptChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
	
	public Department()
	{
		this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
		this._Greivances = new EntitySet<Greivance>(new Action<Greivance>(this.attach_Greivances), new Action<Greivance>(this.detach_Greivances));
		this._PositionOfCurrentDocs = new EntitySet<PositionOfCurrentDoc>(new Action<PositionOfCurrentDoc>(this.attach_PositionOfCurrentDocs), new Action<PositionOfCurrentDoc>(this.detach_PositionOfCurrentDocs));
		this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
		this._WorkflowDocuments = new EntitySet<WorkflowDocument>(new Action<WorkflowDocument>(this.attach_WorkflowDocuments), new Action<WorkflowDocument>(this.detach_WorkflowDocuments));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDept", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int IdDept
	{
		get
		{
			return this._IdDept;
		}
		set
		{
			if ((this._IdDept != value))
			{
				this.OnIdDeptChanging(value);
				this.SendPropertyChanging();
				this._IdDept = value;
				this.SendPropertyChanged("IdDept");
				this.OnIdDeptChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(16)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Document", Storage="_Documents", ThisKey="IdDept", OtherKey="IdDept")]
	public EntitySet<Document> Documents
	{
		get
		{
			return this._Documents;
		}
		set
		{
			this._Documents.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Greivance", Storage="_Greivances", ThisKey="IdDept", OtherKey="IdDept")]
	public EntitySet<Greivance> Greivances
	{
		get
		{
			return this._Greivances;
		}
		set
		{
			this._Greivances.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_PositionOfCurrentDoc", Storage="_PositionOfCurrentDocs", ThisKey="IdDept", OtherKey="IdDept")]
	public EntitySet<PositionOfCurrentDoc> PositionOfCurrentDocs
	{
		get
		{
			return this._PositionOfCurrentDocs;
		}
		set
		{
			this._PositionOfCurrentDocs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_User", Storage="_Users", ThisKey="IdDept", OtherKey="IdDept")]
	public EntitySet<User> Users
	{
		get
		{
			return this._Users;
		}
		set
		{
			this._Users.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_WorkflowDocument", Storage="_WorkflowDocuments", ThisKey="IdDept", OtherKey="IdDept")]
	public EntitySet<WorkflowDocument> WorkflowDocuments
	{
		get
		{
			return this._WorkflowDocuments;
		}
		set
		{
			this._WorkflowDocuments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Documents(Document entity)
	{
		this.SendPropertyChanging();
		entity.Department = this;
	}
	
	private void detach_Documents(Document entity)
	{
		this.SendPropertyChanging();
		entity.Department = null;
	}
	
	private void attach_Greivances(Greivance entity)
	{
		this.SendPropertyChanging();
		entity.Department = this;
	}
	
	private void detach_Greivances(Greivance entity)
	{
		this.SendPropertyChanging();
		entity.Department = null;
	}
	
	private void attach_PositionOfCurrentDocs(PositionOfCurrentDoc entity)
	{
		this.SendPropertyChanging();
		entity.Department = this;
	}
	
	private void detach_PositionOfCurrentDocs(PositionOfCurrentDoc entity)
	{
		this.SendPropertyChanging();
		entity.Department = null;
	}
	
	private void attach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Department = this;
	}
	
	private void detach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Department = null;
	}
	
	private void attach_WorkflowDocuments(WorkflowDocument entity)
	{
		this.SendPropertyChanging();
		entity.Department = this;
	}
	
	private void detach_WorkflowDocuments(WorkflowDocument entity)
	{
		this.SendPropertyChanging();
		entity.Department = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocDetails")]
public partial class DocDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IdDocDetail;
	
	private System.Nullable<byte> _NumNounPaper;
	
	private string _NameOfNounPaper;
	
	private System.Nullable<int> _IdDoc;
	
	private EntityRef<Document> _Document;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdDocDetailChanging(int value);
    partial void OnIdDocDetailChanged();
    partial void OnNumNounPaperChanging(System.Nullable<byte> value);
    partial void OnNumNounPaperChanged();
    partial void OnNameOfNounPaperChanging(string value);
    partial void OnNameOfNounPaperChanged();
    partial void OnIdDocChanging(System.Nullable<int> value);
    partial void OnIdDocChanged();
    #endregion
	
	public DocDetail()
	{
		this._Document = default(EntityRef<Document>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDocDetail", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IdDocDetail
	{
		get
		{
			return this._IdDocDetail;
		}
		set
		{
			if ((this._IdDocDetail != value))
			{
				this.OnIdDocDetailChanging(value);
				this.SendPropertyChanging();
				this._IdDocDetail = value;
				this.SendPropertyChanged("IdDocDetail");
				this.OnIdDocDetailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumNounPaper", DbType="TinyInt")]
	public System.Nullable<byte> NumNounPaper
	{
		get
		{
			return this._NumNounPaper;
		}
		set
		{
			if ((this._NumNounPaper != value))
			{
				this.OnNumNounPaperChanging(value);
				this.SendPropertyChanging();
				this._NumNounPaper = value;
				this.SendPropertyChanged("NumNounPaper");
				this.OnNumNounPaperChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameOfNounPaper", DbType="VarChar(200)")]
	public string NameOfNounPaper
	{
		get
		{
			return this._NameOfNounPaper;
		}
		set
		{
			if ((this._NameOfNounPaper != value))
			{
				this.OnNameOfNounPaperChanging(value);
				this.SendPropertyChanging();
				this._NameOfNounPaper = value;
				this.SendPropertyChanged("NameOfNounPaper");
				this.OnNameOfNounPaperChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDoc", DbType="Int")]
	public System.Nullable<int> IdDoc
	{
		get
		{
			return this._IdDoc;
		}
		set
		{
			if ((this._IdDoc != value))
			{
				if (this._Document.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdDocChanging(value);
				this.SendPropertyChanging();
				this._IdDoc = value;
				this.SendPropertyChanged("IdDoc");
				this.OnIdDocChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocDetail", Storage="_Document", ThisKey="IdDoc", OtherKey="IdDoc", IsForeignKey=true)]
	public Document Document
	{
		get
		{
			return this._Document.Entity;
		}
		set
		{
			Document previousValue = this._Document.Entity;
			if (((previousValue != value) 
						|| (this._Document.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Document.Entity = null;
					previousValue.DocDetails.Remove(this);
				}
				this._Document.Entity = value;
				if ((value != null))
				{
					value.DocDetails.Add(this);
					this._IdDoc = value.IdDoc;
				}
				else
				{
					this._IdDoc = default(Nullable<int>);
				}
				this.SendPropertyChanged("Document");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Documents")]
public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IdDoc;
	
	private string _DocumentName;
	
	private int _IdDept;
	
	private EntitySet<CurrentRequest> _CurrentRequests;
	
	private EntitySet<DocDetail> _DocDetails;
	
	private EntitySet<WorkflowDocument> _WorkflowDocuments;
	
	private EntityRef<Department> _Department;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdDocChanging(int value);
    partial void OnIdDocChanged();
    partial void OnDocumentNameChanging(string value);
    partial void OnDocumentNameChanged();
    partial void OnIdDeptChanging(int value);
    partial void OnIdDeptChanged();
    #endregion
	
	public Document()
	{
		this._CurrentRequests = new EntitySet<CurrentRequest>(new Action<CurrentRequest>(this.attach_CurrentRequests), new Action<CurrentRequest>(this.detach_CurrentRequests));
		this._DocDetails = new EntitySet<DocDetail>(new Action<DocDetail>(this.attach_DocDetails), new Action<DocDetail>(this.detach_DocDetails));
		this._WorkflowDocuments = new EntitySet<WorkflowDocument>(new Action<WorkflowDocument>(this.attach_WorkflowDocuments), new Action<WorkflowDocument>(this.detach_WorkflowDocuments));
		this._Department = default(EntityRef<Department>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDoc", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IdDoc
	{
		get
		{
			return this._IdDoc;
		}
		set
		{
			if ((this._IdDoc != value))
			{
				this.OnIdDocChanging(value);
				this.SendPropertyChanging();
				this._IdDoc = value;
				this.SendPropertyChanged("IdDoc");
				this.OnIdDocChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string DocumentName
	{
		get
		{
			return this._DocumentName;
		}
		set
		{
			if ((this._DocumentName != value))
			{
				this.OnDocumentNameChanging(value);
				this.SendPropertyChanging();
				this._DocumentName = value;
				this.SendPropertyChanged("DocumentName");
				this.OnDocumentNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDept", DbType="Int NOT NULL")]
	public int IdDept
	{
		get
		{
			return this._IdDept;
		}
		set
		{
			if ((this._IdDept != value))
			{
				if (this._Department.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdDeptChanging(value);
				this.SendPropertyChanging();
				this._IdDept = value;
				this.SendPropertyChanged("IdDept");
				this.OnIdDeptChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_CurrentRequest", Storage="_CurrentRequests", ThisKey="IdDoc", OtherKey="IdDoc")]
	public EntitySet<CurrentRequest> CurrentRequests
	{
		get
		{
			return this._CurrentRequests;
		}
		set
		{
			this._CurrentRequests.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocDetail", Storage="_DocDetails", ThisKey="IdDoc", OtherKey="IdDoc")]
	public EntitySet<DocDetail> DocDetails
	{
		get
		{
			return this._DocDetails;
		}
		set
		{
			this._DocDetails.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_WorkflowDocument", Storage="_WorkflowDocuments", ThisKey="IdDoc", OtherKey="IdDoc")]
	public EntitySet<WorkflowDocument> WorkflowDocuments
	{
		get
		{
			return this._WorkflowDocuments;
		}
		set
		{
			this._WorkflowDocuments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Document", Storage="_Department", ThisKey="IdDept", OtherKey="IdDept", IsForeignKey=true)]
	public Department Department
	{
		get
		{
			return this._Department.Entity;
		}
		set
		{
			Department previousValue = this._Department.Entity;
			if (((previousValue != value) 
						|| (this._Department.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Department.Entity = null;
					previousValue.Documents.Remove(this);
				}
				this._Department.Entity = value;
				if ((value != null))
				{
					value.Documents.Add(this);
					this._IdDept = value.IdDept;
				}
				else
				{
					this._IdDept = default(int);
				}
				this.SendPropertyChanged("Department");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CurrentRequests(CurrentRequest entity)
	{
		this.SendPropertyChanging();
		entity.Document = this;
	}
	
	private void detach_CurrentRequests(CurrentRequest entity)
	{
		this.SendPropertyChanging();
		entity.Document = null;
	}
	
	private void attach_DocDetails(DocDetail entity)
	{
		this.SendPropertyChanging();
		entity.Document = this;
	}
	
	private void detach_DocDetails(DocDetail entity)
	{
		this.SendPropertyChanging();
		entity.Document = null;
	}
	
	private void attach_WorkflowDocuments(WorkflowDocument entity)
	{
		this.SendPropertyChanging();
		entity.Document = this;
	}
	
	private void detach_WorkflowDocuments(WorkflowDocument entity)
	{
		this.SendPropertyChanging();
		entity.Document = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Greivances")]
public partial class Greivance : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IdGreivance;
	
	private System.Nullable<int> _IdUser;
	
	private System.Nullable<int> _IdDept;
	
	private string _Problem;
	
	private System.Nullable<System.DateTime> _DateOfAction;
	
	private EntityRef<Department> _Department;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdGreivanceChanging(int value);
    partial void OnIdGreivanceChanged();
    partial void OnIdUserChanging(System.Nullable<int> value);
    partial void OnIdUserChanged();
    partial void OnIdDeptChanging(System.Nullable<int> value);
    partial void OnIdDeptChanged();
    partial void OnProblemChanging(string value);
    partial void OnProblemChanged();
    partial void OnDateOfActionChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfActionChanged();
    #endregion
	
	public Greivance()
	{
		this._Department = default(EntityRef<Department>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdGreivance", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IdGreivance
	{
		get
		{
			return this._IdGreivance;
		}
		set
		{
			if ((this._IdGreivance != value))
			{
				this.OnIdGreivanceChanging(value);
				this.SendPropertyChanging();
				this._IdGreivance = value;
				this.SendPropertyChanged("IdGreivance");
				this.OnIdGreivanceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", DbType="Int")]
	public System.Nullable<int> IdUser
	{
		get
		{
			return this._IdUser;
		}
		set
		{
			if ((this._IdUser != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdUserChanging(value);
				this.SendPropertyChanging();
				this._IdUser = value;
				this.SendPropertyChanged("IdUser");
				this.OnIdUserChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDept", DbType="Int")]
	public System.Nullable<int> IdDept
	{
		get
		{
			return this._IdDept;
		}
		set
		{
			if ((this._IdDept != value))
			{
				if (this._Department.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdDeptChanging(value);
				this.SendPropertyChanging();
				this._IdDept = value;
				this.SendPropertyChanged("IdDept");
				this.OnIdDeptChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Problem", DbType="VarChar(500)")]
	public string Problem
	{
		get
		{
			return this._Problem;
		}
		set
		{
			if ((this._Problem != value))
			{
				this.OnProblemChanging(value);
				this.SendPropertyChanging();
				this._Problem = value;
				this.SendPropertyChanged("Problem");
				this.OnProblemChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAction", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateOfAction
	{
		get
		{
			return this._DateOfAction;
		}
		set
		{
			if ((this._DateOfAction != value))
			{
				this.OnDateOfActionChanging(value);
				this.SendPropertyChanging();
				this._DateOfAction = value;
				this.SendPropertyChanged("DateOfAction");
				this.OnDateOfActionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Greivance", Storage="_Department", ThisKey="IdDept", OtherKey="IdDept", IsForeignKey=true)]
	public Department Department
	{
		get
		{
			return this._Department.Entity;
		}
		set
		{
			Department previousValue = this._Department.Entity;
			if (((previousValue != value) 
						|| (this._Department.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Department.Entity = null;
					previousValue.Greivances.Remove(this);
				}
				this._Department.Entity = value;
				if ((value != null))
				{
					value.Greivances.Add(this);
					this._IdDept = value.IdDept;
				}
				else
				{
					this._IdDept = default(Nullable<int>);
				}
				this.SendPropertyChanged("Department");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Greivance", Storage="_User", ThisKey="IdUser", OtherKey="UserId", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Greivances.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Greivances.Add(this);
					this._IdUser = value.UserId;
				}
				else
				{
					this._IdUser = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PositionOfCurrentDocs")]
public partial class PositionOfCurrentDoc : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IdPositionOfCurrentDoc;
	
	private int _IdWorkflowDoc;
	
	private int _IdRequest;
	
	private int _IdDept;
	
	private int _IdAction;
	
	private EntityRef<Action> _Action;
	
	private EntityRef<CurrentRequest> _CurrentRequest;
	
	private EntityRef<Department> _Department;
	
	private EntityRef<WorkflowDocument> _WorkflowDocument;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdPositionOfCurrentDocChanging(int value);
    partial void OnIdPositionOfCurrentDocChanged();
    partial void OnIdWorkflowDocChanging(int value);
    partial void OnIdWorkflowDocChanged();
    partial void OnIdRequestChanging(int value);
    partial void OnIdRequestChanged();
    partial void OnIdDeptChanging(int value);
    partial void OnIdDeptChanged();
    partial void OnIdActionChanging(int value);
    partial void OnIdActionChanged();
    #endregion
	
	public PositionOfCurrentDoc()
	{
		this._Action = default(EntityRef<Action>);
		this._CurrentRequest = default(EntityRef<CurrentRequest>);
		this._Department = default(EntityRef<Department>);
		this._WorkflowDocument = default(EntityRef<WorkflowDocument>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPositionOfCurrentDoc", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IdPositionOfCurrentDoc
	{
		get
		{
			return this._IdPositionOfCurrentDoc;
		}
		set
		{
			if ((this._IdPositionOfCurrentDoc != value))
			{
				this.OnIdPositionOfCurrentDocChanging(value);
				this.SendPropertyChanging();
				this._IdPositionOfCurrentDoc = value;
				this.SendPropertyChanged("IdPositionOfCurrentDoc");
				this.OnIdPositionOfCurrentDocChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdWorkflowDoc", DbType="Int NOT NULL")]
	public int IdWorkflowDoc
	{
		get
		{
			return this._IdWorkflowDoc;
		}
		set
		{
			if ((this._IdWorkflowDoc != value))
			{
				if (this._WorkflowDocument.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdWorkflowDocChanging(value);
				this.SendPropertyChanging();
				this._IdWorkflowDoc = value;
				this.SendPropertyChanged("IdWorkflowDoc");
				this.OnIdWorkflowDocChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRequest", DbType="Int NOT NULL")]
	public int IdRequest
	{
		get
		{
			return this._IdRequest;
		}
		set
		{
			if ((this._IdRequest != value))
			{
				if (this._CurrentRequest.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdRequestChanging(value);
				this.SendPropertyChanging();
				this._IdRequest = value;
				this.SendPropertyChanged("IdRequest");
				this.OnIdRequestChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDept", DbType="Int NOT NULL")]
	public int IdDept
	{
		get
		{
			return this._IdDept;
		}
		set
		{
			if ((this._IdDept != value))
			{
				if (this._Department.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdDeptChanging(value);
				this.SendPropertyChanging();
				this._IdDept = value;
				this.SendPropertyChanged("IdDept");
				this.OnIdDeptChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAction", DbType="Int NOT NULL")]
	public int IdAction
	{
		get
		{
			return this._IdAction;
		}
		set
		{
			if ((this._IdAction != value))
			{
				if (this._Action.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdActionChanging(value);
				this.SendPropertyChanging();
				this._IdAction = value;
				this.SendPropertyChanged("IdAction");
				this.OnIdActionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_PositionOfCurrentDoc", Storage="_Action", ThisKey="IdAction", OtherKey="IdAction", IsForeignKey=true)]
	public Action Action
	{
		get
		{
			return this._Action.Entity;
		}
		set
		{
			Action previousValue = this._Action.Entity;
			if (((previousValue != value) 
						|| (this._Action.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Action.Entity = null;
					previousValue.PositionOfCurrentDocs.Remove(this);
				}
				this._Action.Entity = value;
				if ((value != null))
				{
					value.PositionOfCurrentDocs.Add(this);
					this._IdAction = value.IdAction;
				}
				else
				{
					this._IdAction = default(int);
				}
				this.SendPropertyChanged("Action");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurrentRequest_PositionOfCurrentDoc", Storage="_CurrentRequest", ThisKey="IdRequest", OtherKey="IdRequest", IsForeignKey=true)]
	public CurrentRequest CurrentRequest
	{
		get
		{
			return this._CurrentRequest.Entity;
		}
		set
		{
			CurrentRequest previousValue = this._CurrentRequest.Entity;
			if (((previousValue != value) 
						|| (this._CurrentRequest.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CurrentRequest.Entity = null;
					previousValue.PositionOfCurrentDocs.Remove(this);
				}
				this._CurrentRequest.Entity = value;
				if ((value != null))
				{
					value.PositionOfCurrentDocs.Add(this);
					this._IdRequest = value.IdRequest;
				}
				else
				{
					this._IdRequest = default(int);
				}
				this.SendPropertyChanged("CurrentRequest");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_PositionOfCurrentDoc", Storage="_Department", ThisKey="IdDept", OtherKey="IdDept", IsForeignKey=true)]
	public Department Department
	{
		get
		{
			return this._Department.Entity;
		}
		set
		{
			Department previousValue = this._Department.Entity;
			if (((previousValue != value) 
						|| (this._Department.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Department.Entity = null;
					previousValue.PositionOfCurrentDocs.Remove(this);
				}
				this._Department.Entity = value;
				if ((value != null))
				{
					value.PositionOfCurrentDocs.Add(this);
					this._IdDept = value.IdDept;
				}
				else
				{
					this._IdDept = default(int);
				}
				this.SendPropertyChanged("Department");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkflowDocument_PositionOfCurrentDoc", Storage="_WorkflowDocument", ThisKey="IdWorkflowDoc", OtherKey="IdWorkflowDoc", IsForeignKey=true)]
	public WorkflowDocument WorkflowDocument
	{
		get
		{
			return this._WorkflowDocument.Entity;
		}
		set
		{
			WorkflowDocument previousValue = this._WorkflowDocument.Entity;
			if (((previousValue != value) 
						|| (this._WorkflowDocument.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._WorkflowDocument.Entity = null;
					previousValue.PositionOfCurrentDocs.Remove(this);
				}
				this._WorkflowDocument.Entity = value;
				if ((value != null))
				{
					value.PositionOfCurrentDocs.Add(this);
					this._IdWorkflowDoc = value.IdWorkflowDoc;
				}
				else
				{
					this._IdWorkflowDoc = default(int);
				}
				this.SendPropertyChanged("WorkflowDocument");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RequestAttachments")]
public partial class RequestAttachment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IdRequestFile;
	
	private string _FileName;
	
	private string _FileTyp;
	
	private System.Data.Linq.Binary _FileItSelf;
	
	private int _IdRequest;
	
	private EntityRef<CurrentRequest> _CurrentRequest;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRequestFileChanging(int value);
    partial void OnIdRequestFileChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFileTypChanging(string value);
    partial void OnFileTypChanged();
    partial void OnFileItSelfChanging(System.Data.Linq.Binary value);
    partial void OnFileItSelfChanged();
    partial void OnIdRequestChanging(int value);
    partial void OnIdRequestChanged();
    #endregion
	
	public RequestAttachment()
	{
		this._CurrentRequest = default(EntityRef<CurrentRequest>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRequestFile", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IdRequestFile
	{
		get
		{
			return this._IdRequestFile;
		}
		set
		{
			if ((this._IdRequestFile != value))
			{
				this.OnIdRequestFileChanging(value);
				this.SendPropertyChanging();
				this._IdRequestFile = value;
				this.SendPropertyChanged("IdRequestFile");
				this.OnIdRequestFileChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="VarChar(100)")]
	public string FileName
	{
		get
		{
			return this._FileName;
		}
		set
		{
			if ((this._FileName != value))
			{
				this.OnFileNameChanging(value);
				this.SendPropertyChanging();
				this._FileName = value;
				this.SendPropertyChanged("FileName");
				this.OnFileNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileTyp", DbType="NChar(10)")]
	public string FileTyp
	{
		get
		{
			return this._FileTyp;
		}
		set
		{
			if ((this._FileTyp != value))
			{
				this.OnFileTypChanging(value);
				this.SendPropertyChanging();
				this._FileTyp = value;
				this.SendPropertyChanged("FileTyp");
				this.OnFileTypChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileItSelf", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary FileItSelf
	{
		get
		{
			return this._FileItSelf;
		}
		set
		{
			if ((this._FileItSelf != value))
			{
				this.OnFileItSelfChanging(value);
				this.SendPropertyChanging();
				this._FileItSelf = value;
				this.SendPropertyChanged("FileItSelf");
				this.OnFileItSelfChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRequest", DbType="Int NOT NULL")]
	public int IdRequest
	{
		get
		{
			return this._IdRequest;
		}
		set
		{
			if ((this._IdRequest != value))
			{
				if (this._CurrentRequest.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdRequestChanging(value);
				this.SendPropertyChanging();
				this._IdRequest = value;
				this.SendPropertyChanged("IdRequest");
				this.OnIdRequestChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurrentRequest_RequestAttachment", Storage="_CurrentRequest", ThisKey="IdRequest", OtherKey="IdRequest", IsForeignKey=true)]
	public CurrentRequest CurrentRequest
	{
		get
		{
			return this._CurrentRequest.Entity;
		}
		set
		{
			CurrentRequest previousValue = this._CurrentRequest.Entity;
			if (((previousValue != value) 
						|| (this._CurrentRequest.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CurrentRequest.Entity = null;
					previousValue.RequestAttachments.Remove(this);
				}
				this._CurrentRequest.Entity = value;
				if ((value != null))
				{
					value.RequestAttachments.Add(this);
					this._IdRequest = value.IdRequest;
				}
				else
				{
					this._IdRequest = default(int);
				}
				this.SendPropertyChanged("CurrentRequest");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UserId;
	
	private string _FirstName;
	
	private string _LastName;
	
	private System.DateTime _DateOfBirth;
	
	private string _Email;
	
	private string _UserName;
	
	private string _Password;
	
	private byte _TypeUserId;
	
	private string _TypeLogin;
	
	private int _IdDept;
	
	private bool _IsActive;
	
	private EntitySet<CurrentRequest> _CurrentRequests;
	
	private EntitySet<Greivance> _Greivances;
	
	private EntityRef<Department> _Department;
	
	private EntityRef<UserType> _UserType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnTypeUserIdChanging(byte value);
    partial void OnTypeUserIdChanged();
    partial void OnTypeLoginChanging(string value);
    partial void OnTypeLoginChanged();
    partial void OnIdDeptChanging(int value);
    partial void OnIdDeptChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
	
	public User()
	{
		this._CurrentRequests = new EntitySet<CurrentRequest>(new Action<CurrentRequest>(this.attach_CurrentRequests), new Action<CurrentRequest>(this.detach_CurrentRequests));
		this._Greivances = new EntitySet<Greivance>(new Action<Greivance>(this.attach_Greivances), new Action<Greivance>(this.detach_Greivances));
		this._Department = default(EntityRef<Department>);
		this._UserType = default(EntityRef<UserType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date NOT NULL")]
	public System.DateTime DateOfBirth
	{
		get
		{
			return this._DateOfBirth;
		}
		set
		{
			if ((this._DateOfBirth != value))
			{
				this.OnDateOfBirthChanging(value);
				this.SendPropertyChanging();
				this._DateOfBirth = value;
				this.SendPropertyChanged("DateOfBirth");
				this.OnDateOfBirthChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeUserId", DbType="TinyInt NOT NULL")]
	public byte TypeUserId
	{
		get
		{
			return this._TypeUserId;
		}
		set
		{
			if ((this._TypeUserId != value))
			{
				if (this._UserType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTypeUserIdChanging(value);
				this.SendPropertyChanging();
				this._TypeUserId = value;
				this.SendPropertyChanged("TypeUserId");
				this.OnTypeUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeLogin", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string TypeLogin
	{
		get
		{
			return this._TypeLogin;
		}
		set
		{
			if ((this._TypeLogin != value))
			{
				this.OnTypeLoginChanging(value);
				this.SendPropertyChanging();
				this._TypeLogin = value;
				this.SendPropertyChanged("TypeLogin");
				this.OnTypeLoginChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDept", DbType="Int NOT NULL")]
	public int IdDept
	{
		get
		{
			return this._IdDept;
		}
		set
		{
			if ((this._IdDept != value))
			{
				if (this._Department.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdDeptChanging(value);
				this.SendPropertyChanging();
				this._IdDept = value;
				this.SendPropertyChanged("IdDept");
				this.OnIdDeptChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CurrentRequest", Storage="_CurrentRequests", ThisKey="UserId", OtherKey="IdUser")]
	public EntitySet<CurrentRequest> CurrentRequests
	{
		get
		{
			return this._CurrentRequests;
		}
		set
		{
			this._CurrentRequests.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Greivance", Storage="_Greivances", ThisKey="UserId", OtherKey="IdUser")]
	public EntitySet<Greivance> Greivances
	{
		get
		{
			return this._Greivances;
		}
		set
		{
			this._Greivances.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_User", Storage="_Department", ThisKey="IdDept", OtherKey="IdDept", IsForeignKey=true)]
	public Department Department
	{
		get
		{
			return this._Department.Entity;
		}
		set
		{
			Department previousValue = this._Department.Entity;
			if (((previousValue != value) 
						|| (this._Department.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Department.Entity = null;
					previousValue.Users.Remove(this);
				}
				this._Department.Entity = value;
				if ((value != null))
				{
					value.Users.Add(this);
					this._IdDept = value.IdDept;
				}
				else
				{
					this._IdDept = default(int);
				}
				this.SendPropertyChanged("Department");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_UserType", ThisKey="TypeUserId", OtherKey="TypeUserId", IsForeignKey=true)]
	public UserType UserType
	{
		get
		{
			return this._UserType.Entity;
		}
		set
		{
			UserType previousValue = this._UserType.Entity;
			if (((previousValue != value) 
						|| (this._UserType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserType.Entity = null;
					previousValue.Users.Remove(this);
				}
				this._UserType.Entity = value;
				if ((value != null))
				{
					value.Users.Add(this);
					this._TypeUserId = value.TypeUserId;
				}
				else
				{
					this._TypeUserId = default(byte);
				}
				this.SendPropertyChanged("UserType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CurrentRequests(CurrentRequest entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_CurrentRequests(CurrentRequest entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Greivances(Greivance entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Greivances(Greivance entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTypes")]
public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _TypeUserId;
	
	private string _TypeUser;
	
	private EntitySet<User> _Users;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeUserIdChanging(byte value);
    partial void OnTypeUserIdChanged();
    partial void OnTypeUserChanging(string value);
    partial void OnTypeUserChanged();
    #endregion
	
	public UserType()
	{
		this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeUserId", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public byte TypeUserId
	{
		get
		{
			return this._TypeUserId;
		}
		set
		{
			if ((this._TypeUserId != value))
			{
				this.OnTypeUserIdChanging(value);
				this.SendPropertyChanging();
				this._TypeUserId = value;
				this.SendPropertyChanged("TypeUserId");
				this.OnTypeUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeUser", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string TypeUser
	{
		get
		{
			return this._TypeUser;
		}
		set
		{
			if ((this._TypeUser != value))
			{
				this.OnTypeUserChanging(value);
				this.SendPropertyChanging();
				this._TypeUser = value;
				this.SendPropertyChanged("TypeUser");
				this.OnTypeUserChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_Users", ThisKey="TypeUserId", OtherKey="TypeUserId")]
	public EntitySet<User> Users
	{
		get
		{
			return this._Users;
		}
		set
		{
			this._Users.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.UserType = this;
	}
	
	private void detach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.UserType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkflowDocuments")]
public partial class WorkflowDocument : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IdWorkflowDoc;
	
	private int _IdStep;
	
	private int _IdDoc;
	
	private int _IdDept;
	
	private EntitySet<PositionOfCurrentDoc> _PositionOfCurrentDocs;
	
	private EntityRef<Department> _Department;
	
	private EntityRef<Document> _Document;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdWorkflowDocChanging(int value);
    partial void OnIdWorkflowDocChanged();
    partial void OnIdStepChanging(int value);
    partial void OnIdStepChanged();
    partial void OnIdDocChanging(int value);
    partial void OnIdDocChanged();
    partial void OnIdDeptChanging(int value);
    partial void OnIdDeptChanged();
    #endregion
	
	public WorkflowDocument()
	{
		this._PositionOfCurrentDocs = new EntitySet<PositionOfCurrentDoc>(new Action<PositionOfCurrentDoc>(this.attach_PositionOfCurrentDocs), new Action<PositionOfCurrentDoc>(this.detach_PositionOfCurrentDocs));
		this._Department = default(EntityRef<Department>);
		this._Document = default(EntityRef<Document>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdWorkflowDoc", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IdWorkflowDoc
	{
		get
		{
			return this._IdWorkflowDoc;
		}
		set
		{
			if ((this._IdWorkflowDoc != value))
			{
				this.OnIdWorkflowDocChanging(value);
				this.SendPropertyChanging();
				this._IdWorkflowDoc = value;
				this.SendPropertyChanged("IdWorkflowDoc");
				this.OnIdWorkflowDocChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdStep", DbType="Int NOT NULL")]
	public int IdStep
	{
		get
		{
			return this._IdStep;
		}
		set
		{
			if ((this._IdStep != value))
			{
				this.OnIdStepChanging(value);
				this.SendPropertyChanging();
				this._IdStep = value;
				this.SendPropertyChanged("IdStep");
				this.OnIdStepChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDoc", DbType="Int NOT NULL")]
	public int IdDoc
	{
		get
		{
			return this._IdDoc;
		}
		set
		{
			if ((this._IdDoc != value))
			{
				if (this._Document.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdDocChanging(value);
				this.SendPropertyChanging();
				this._IdDoc = value;
				this.SendPropertyChanged("IdDoc");
				this.OnIdDocChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDept", DbType="Int NOT NULL")]
	public int IdDept
	{
		get
		{
			return this._IdDept;
		}
		set
		{
			if ((this._IdDept != value))
			{
				if (this._Department.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdDeptChanging(value);
				this.SendPropertyChanging();
				this._IdDept = value;
				this.SendPropertyChanged("IdDept");
				this.OnIdDeptChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkflowDocument_PositionOfCurrentDoc", Storage="_PositionOfCurrentDocs", ThisKey="IdWorkflowDoc", OtherKey="IdWorkflowDoc")]
	public EntitySet<PositionOfCurrentDoc> PositionOfCurrentDocs
	{
		get
		{
			return this._PositionOfCurrentDocs;
		}
		set
		{
			this._PositionOfCurrentDocs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_WorkflowDocument", Storage="_Department", ThisKey="IdDept", OtherKey="IdDept", IsForeignKey=true)]
	public Department Department
	{
		get
		{
			return this._Department.Entity;
		}
		set
		{
			Department previousValue = this._Department.Entity;
			if (((previousValue != value) 
						|| (this._Department.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Department.Entity = null;
					previousValue.WorkflowDocuments.Remove(this);
				}
				this._Department.Entity = value;
				if ((value != null))
				{
					value.WorkflowDocuments.Add(this);
					this._IdDept = value.IdDept;
				}
				else
				{
					this._IdDept = default(int);
				}
				this.SendPropertyChanged("Department");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_WorkflowDocument", Storage="_Document", ThisKey="IdDoc", OtherKey="IdDoc", IsForeignKey=true)]
	public Document Document
	{
		get
		{
			return this._Document.Entity;
		}
		set
		{
			Document previousValue = this._Document.Entity;
			if (((previousValue != value) 
						|| (this._Document.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Document.Entity = null;
					previousValue.WorkflowDocuments.Remove(this);
				}
				this._Document.Entity = value;
				if ((value != null))
				{
					value.WorkflowDocuments.Add(this);
					this._IdDoc = value.IdDoc;
				}
				else
				{
					this._IdDoc = default(int);
				}
				this.SendPropertyChanged("Document");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PositionOfCurrentDocs(PositionOfCurrentDoc entity)
	{
		this.SendPropertyChanging();
		entity.WorkflowDocument = this;
	}
	
	private void detach_PositionOfCurrentDocs(PositionOfCurrentDoc entity)
	{
		this.SendPropertyChanging();
		entity.WorkflowDocument = null;
	}
}
#pragma warning restore 1591
